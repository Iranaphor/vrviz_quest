using System;
using UnityEngine;
using Newtonsoft.Json;
using std_msgs = VRViz.Msg.std_msgs;

namespace VRViz.Serialisers {
	public class BaseConverter : JsonConverter{
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer){throw new NotImplementedException("No need to Write");}
		public override bool CanWrite{get {return false;}}
		public override bool CanRead{get {return true;}}
	}

	 //Autogenerated NewtonSoft Json type converters for ROS std_msgs messages following the format of ;=>
	 public class UInt64Converter : BaseConverter {
        public override object ReadJson(JsonReader reader, Type objectType, object existing, JsonSerializer serializer){
            std_msgs.UInt64 obj = new std_msgs.UInt64();
            obj.data = Convert.ToUInt64(reader.Value);
            return obj;	
        }
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(std_msgs.UInt64);
        }
    }
	
	 //Autogenerated NewtonSoft Json type converters for ROS std_msgs messages following the format of ;=>
	 public class Int32Converter : BaseConverter {
        public override object ReadJson(JsonReader reader, Type objectType, object existing, JsonSerializer serializer){
            std_msgs.Int32 obj = new std_msgs.Int32();
            obj.data = Convert.ToInt32(reader.Value);
            return obj;	
        }
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(std_msgs.Int32);
        }
    }
	
	 //Autogenerated NewtonSoft Json type converters for ROS std_msgs messages following the format of ;=>
	 public class Int16Converter : BaseConverter {
        public override object ReadJson(JsonReader reader, Type objectType, object existing, JsonSerializer serializer){
            std_msgs.Int16 obj = new std_msgs.Int16();
            obj.data = Convert.ToInt16(reader.Value);
            return obj;	
        }
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(std_msgs.Int16);
        }
    }
	
	 //Autogenerated NewtonSoft Json type converters for ROS std_msgs messages following the format of ;=>
	 public class StringConverter : BaseConverter {
        public override object ReadJson(JsonReader reader, Type objectType, object existing, JsonSerializer serializer){
            std_msgs.String obj = new std_msgs.String();
            obj.data = Convert.ToString(reader.Value);
            return obj;	
        }
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(std_msgs.String);
        }
    }
	
	 //Autogenerated NewtonSoft Json type converters for ROS std_msgs messages following the format of ;=>
	 public class Float64Converter : BaseConverter {
        public override object ReadJson(JsonReader reader, Type objectType, object existing, JsonSerializer serializer){
            std_msgs.Float64 obj = new std_msgs.Float64();
            obj.data = Convert.ToFloat64(reader.Value);
            return obj;	
        }
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(std_msgs.Float64);
        }
    }
	
	 //Autogenerated NewtonSoft Json type converters for ROS std_msgs messages following the format of ;=>
	 public class UInt8Converter : BaseConverter {
        public override object ReadJson(JsonReader reader, Type objectType, object existing, JsonSerializer serializer){
            std_msgs.UInt8 obj = new std_msgs.UInt8();
            obj.data = Convert.ToUInt8(reader.Value);
            return obj;	
        }
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(std_msgs.UInt8);
        }
    }
	
	 //Autogenerated NewtonSoft Json type converters for ROS std_msgs messages following the format of ;=>
	 public class Int8Converter : BaseConverter {
        public override object ReadJson(JsonReader reader, Type objectType, object existing, JsonSerializer serializer){
            std_msgs.Int8 obj = new std_msgs.Int8();
            obj.data = Convert.ToInt8(reader.Value);
            return obj;	
        }
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(std_msgs.Int8);
        }
    }
	
	 //Autogenerated NewtonSoft Json type converters for ROS std_msgs messages following the format of ;=>
	 public class CharConverter : BaseConverter {
        public override object ReadJson(JsonReader reader, Type objectType, object existing, JsonSerializer serializer){
            std_msgs.Char obj = new std_msgs.Char();
            obj.data = Convert.ToChar(reader.Value);
            return obj;	
        }
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(std_msgs.Char);
        }
    }
	
	 //Autogenerated NewtonSoft Json type converters for ROS std_msgs messages following the format of ;=>
	 public class UInt16Converter : BaseConverter {
        public override object ReadJson(JsonReader reader, Type objectType, object existing, JsonSerializer serializer){
            std_msgs.UInt16 obj = new std_msgs.UInt16();
            obj.data = Convert.ToUInt16(reader.Value);
            return obj;	
        }
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(std_msgs.UInt16);
        }
    }
	
	 //Autogenerated NewtonSoft Json type converters for ROS std_msgs messages following the format of ;=>
	 public class Int64Converter : BaseConverter {
        public override object ReadJson(JsonReader reader, Type objectType, object existing, JsonSerializer serializer){
            std_msgs.Int64 obj = new std_msgs.Int64();
            obj.data = Convert.ToInt64(reader.Value);
            return obj;	
        }
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(std_msgs.Int64);
        }
    }
	
	 //Autogenerated NewtonSoft Json type converters for ROS std_msgs messages following the format of ;=>
	 public class TimeConverter : BaseConverter {
        public override object ReadJson(JsonReader reader, Type objectType, object existing, JsonSerializer serializer){
            std_msgs.Time obj = new std_msgs.Time();
            obj.data = Convert.ToTime(reader.Value);
            return obj;	
        }
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(std_msgs.Time);
        }
    }
	
	 //Autogenerated NewtonSoft Json type converters for ROS std_msgs messages following the format of ;=>
	 public class DurationConverter : BaseConverter {
        public override object ReadJson(JsonReader reader, Type objectType, object existing, JsonSerializer serializer){
            std_msgs.Duration obj = new std_msgs.Duration();
            obj.data = Convert.ToDuration(reader.Value);
            return obj;	
        }
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(std_msgs.Duration);
        }
    }
	
	 //Autogenerated NewtonSoft Json type converters for ROS std_msgs messages following the format of ;=>
	 public class BoolConverter : BaseConverter {
        public override object ReadJson(JsonReader reader, Type objectType, object existing, JsonSerializer serializer){
            std_msgs.Bool obj = new std_msgs.Bool();
            obj.data = Convert.ToBool(reader.Value);
            return obj;	
        }
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(std_msgs.Bool);
        }
    }
	
	 //Autogenerated NewtonSoft Json type converters for ROS std_msgs messages following the format of ;=>
	 public class ByteConverter : BaseConverter {
        public override object ReadJson(JsonReader reader, Type objectType, object existing, JsonSerializer serializer){
            std_msgs.Byte obj = new std_msgs.Byte();
            obj.data = Convert.ToByte(reader.Value);
            return obj;	
        }
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(std_msgs.Byte);
        }
    }
	
	 //Autogenerated NewtonSoft Json type converters for ROS std_msgs messages following the format of ;=>
	 public class Float16Converter : BaseConverter {
        public override object ReadJson(JsonReader reader, Type objectType, object existing, JsonSerializer serializer){
            std_msgs.Float16 obj = new std_msgs.Float16();
            obj.data = Convert.ToFloat16(reader.Value);
            return obj;	
        }
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(std_msgs.Float16);
        }
    }
	
	 //Autogenerated NewtonSoft Json type converters for ROS std_msgs messages following the format of ;=>
	 public class UInt32Converter : BaseConverter {
        public override object ReadJson(JsonReader reader, Type objectType, object existing, JsonSerializer serializer){
            std_msgs.UInt32 obj = new std_msgs.UInt32();
            obj.data = Convert.ToUInt32(reader.Value);
            return obj;	
        }
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(std_msgs.UInt32);
        }
    }
	
	 //Autogenerated NewtonSoft Json type converters for ROS std_msgs messages following the format of ;=>
	 public class Float32Converter : BaseConverter {
        public override object ReadJson(JsonReader reader, Type objectType, object existing, JsonSerializer serializer){
            std_msgs.Float32 obj = new std_msgs.Float32();
            obj.data = Convert.ToFloat32(reader.Value);
            return obj;	
        }
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(std_msgs.Float32);
        }
    }
	}